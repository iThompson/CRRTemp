// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "ToteStacker.h"
#include "../RobotMap.h"
#include "../Commands/ToteStacker/ToteDriveTowardsSetPoint.h"
#define CHANGE_TOTE 5000 //TODO: Dummy Value Replace
#define FINAL_TOTE 2000 //TODO: Dummy Value Replace
#define DROP 2000

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

ToteStacker::ToteStacker() : Subsystem("ToteStacker") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	toteLift = RobotMap::toteStackertoteLift;
	brake = RobotMap::toteStackerbrake;
	toteHall = RobotMap::toteStackerhall;
	m_relativePosition = StackerRelative::GROUND; //TODO: Replace, Dummy value
	m_toteCount = 0;
	m_setPoint = 0;
	m_dropMode = false;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void ToteStacker::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new ToteDriveTowardsSetPoint());
}

bool ToteStacker::IsAtHome() {
	return !toteLift->GetReverseLimitOK();
}

void ToteStacker::SetTotes(int totesHigh) {
	if(totesHigh < 0) {
		totesHigh = 0;
	}
	else if(totesHigh > 5) {
		totesHigh = 5;
	}
	m_setPoint = totesHigh;
}

int ToteStacker::GetPos() {
	return toteLift->GetEncPosition();
}

void ToteStacker::SetRelative(StackerRelative position) {
	m_relativePosition = position;
}

StackerRelative ToteStacker::GetRelative() {
	return m_relativePosition;
}


int ToteStacker::GetTotes() {
	return m_setPoint;
}

bool ToteStacker::GetHall() {
	return toteHall->Get();
}

void ToteStacker::SetSpeed(double speed) {
	if(speed != 0) brake->Set(false);
	else brake->Set(true);
	toteLift->SetControlMode(CANTalon::ControlMode::kPercentVbus);
	toteLift->Set(speed);
}

void ToteStacker::DriveToHome() {
	toteLift->Set(-.5);
}

int ToteStacker::GetSetPoint() {
	return m_setPoint;
}

void ToteStacker::SetDrop(bool drop) {
	m_dropMode = drop;
}
void ToteStacker::DriveToPoint() {
	if(!toteLift->GetReverseLimitOK()) {
		toteLift->SetPosition(0);
	}


	int position = ComputeSetPoint();
	double error = position - GetPos();

	//SmartDashboard::PutNumber("error, tote", error);
	//SmartDashboard::PutNumber("current, tote", GetPos());
	//SmartDashboard::PutNumber("point, tote", position);


	if(error > 50){
		brake->Set(false);
		if(error > 1000) {
			toteLift->Set(-.3);
		}
		else {
			toteLift->Set((-error/1000) * .3);
		}
	}
	else if(error < -50) {
		brake->Set(false);
		if(error < -1000) {
			toteLift->Set(.3);
		}
		else {
			toteLift->Set((-error/1000) * .3);
		}
	}
	else {
		toteLift->Set(0);
		brake->Set(true);
	}
}

bool ToteStacker::IsAtSetPoint() {
	return abs(ComputeSetPoint() - GetPos()) < 300; //Not same as dead zone, but might need to change.
}

int ToteStacker::ComputeSetPoint() {
	int position = 0;
	if(m_setPoint == 5) {
		position = (4 * CHANGE_TOTE) + FINAL_TOTE;
	}
	else {
		position = m_setPoint * CHANGE_TOTE;
	}
	position += (int)m_relativePosition;
	if(m_dropMode) {
		position -= DROP;
	}
	return position;
}

void ToteStacker::ZeroTote() {
	toteLift->SetPosition(0);
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

