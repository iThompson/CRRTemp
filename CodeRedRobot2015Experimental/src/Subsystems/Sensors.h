// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef SENSORS_H
#define SENSORS_H
#include "Commands/Subsystem.h"
#include "WPILib.h"
#include <math.h>

#define SENSOR_PERIOD 20
#define SENSOR_NUMBER 6
#define SENSOR(n) (m_sensors + n)
#define ADC_MAX 0xFFF
#define ADC_VAL(n) ((n*(1<<12))/5)
#define SR_CM(cm) ADC_VAL(10.6832 * pow(cm, -0.9407))
#define LR_CM(cm) ADC_VAL((cm <= 40) ? (-0.05*cm + 3.5177) : (47.6959 * pow(cm, -0.9334)))
#define MAX_CHANGE 0.8

/**
 *
 *
 * @author ExampleAuthor
 */
typedef struct
{
	bool tote1;
	bool tote2;
	bool tote3;
	bool tote4;
	bool tote5;
	bool bin;
} sensor_vals;

typedef struct {
	AnalogInput *input;
	uint16_t min;
	uint16_t max;
	unsigned int sum;
	uint16_t values[SENSOR_NUMBER];
	uint16_t prev;
	bool *output;
} sensor_t;


class Sensors: public Subsystem {
private:
	// It's desirable that everything possible under private except
	// for methods that implement subsystem capabilities
	SerialPort* sPort;
	//pdata_t pdata;
	AnalogInput* tote1;
	AnalogInput* tote2;
	AnalogInput* tote3;
	AnalogInput* tote4;
	AnalogInput* tote5;
	AnalogInput* bin;
	sensor_t m_sensors[SENSOR_NUMBER];
	sensor_vals m_sensor_vals;
	int m_index;
	bool m_first;
	void InitSensor(int n, uint16_t min, uint16_t max, AnalogInput *input, bool *output);

public:
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	Sensors();
	void InitDefaultCommand();
	void Update();
	sensor_vals* GetState();
	void RequestUpdate();

};

#endif
