// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Wings.h"
#include "../RobotMap.h"
#include "../Commands/Wings/StopWings.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

Wings::Wings() : Subsystem("Wings") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	wingRetracter = RobotMap::wingswingRetracter;
	leftLimit = RobotMap::wingsleftLimit;
	rightLimit = RobotMap::wingsrightLimit;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void Wings::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new StopWings());
}

void Wings::RunMotor() {
	wingRetracter->Set(-1);
	SmartDashboard::PutBoolean("Wings Running", true);
}

void Wings::StopMotor() {
	wingRetracter->Set(0);
	SmartDashboard::PutBoolean("Wings Running", false);
}

bool Wings::AtRetractLimit() {
	return rightLimit->Get();
}

bool Wings::AtExtendLimit() {
	return leftLimit->Get();
}

void Wings::ReverseMotor() {
	SmartDashboard::PutBoolean("Wings Running", true);
	wingRetracter->Set(.75);
}

// Put methods for controlling this subsystem
// here. Call these from Commands.

