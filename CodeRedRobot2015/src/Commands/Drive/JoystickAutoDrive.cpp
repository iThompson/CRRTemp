// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "JoystickAutoDrive.h"

#define TICKS_PER_DEGREE 500

JoystickAutoDrive::JoystickAutoDrive(double forwardSpeed, double sideSpeed, double turnSpeed, double forwardDistance, double sideDistance, double turnDegrees) :
			m_forwardSpeed(forwardSpeed),
			m_sideSpeed(sideSpeed),
			m_turnSpeed(turnSpeed),
			m_forwardDistance(forwardDistance),
			m_sideDistance(sideDistance),
			m_turnDegrees(turnDegrees)
{
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drive);
	m_startLeft = 0;
	m_startRight = 0;
	m_startSide = 0;
	m_startDegrees = 0;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void JoystickAutoDrive::Initialize() {
	m_startLeft = Robot::drive->GetLeftEnc();
	m_startRight = Robot::drive->GetRightEnc();
	m_startSide = Robot::drive->GetSideEnc();
	m_startDegrees = Robot::drive->GetHeading();
}

// Called repeatedly when this Command is scheduled to run
void JoystickAutoDrive::Execute() {
	Robot::drive->HDrive(m_forwardSpeed, m_sideSpeed, m_turnSpeed);
}

// Make this return true when this Command no longer needs to run execute()
bool JoystickAutoDrive::IsFinished() {
	/*if(m_forwardSpeed != 0) {
		return Robot::drive->GetLeftEnc() - m_startLeft > m_forwardDistance && Robot::drive->GetRightEnc() - m_startRight > m_forwardDistance;
	}
	else if(m_sideSpeed != 0) {
		return Robot::drive->GetSideEnc() - m_startSide > m_sideDistance;
	}
	else if(m_turnSpeed != 0) {
		//return abs((((m_startDegrees + 180) + m_turnDegrees) % 360) - (Robot::drive->GetSideEnc() + 180)) < 5;
		double temp = (m_startDegrees) - (Robot::drive->GetHeading());
		if(m_turnSpeed < 0) temp = -temp;
		while(temp < 0) temp += 360;
		return (temp - 180) > m_turnDegrees;
	}
	else {
		return false;
	}
	*/
	return false;
}

// Called once after isFinished returns true
void JoystickAutoDrive::End() {
	//Robot::drive->HDrive(0,0,0);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void JoystickAutoDrive::Interrupted() {
	//Robot::drive->HDrive(0,0,0);
}
