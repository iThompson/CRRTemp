// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
CANJaguar* RobotMap::shooterSpinner = NULL;
CANJaguar* RobotMap::armWrist = NULL;
CANJaguar* RobotMap::armElbow = NULL;
SpeedController* RobotMap::driveLeft = NULL;
SpeedController* RobotMap::driveRight = NULL;
Encoder* RobotMap::drivelEnc = NULL;
Encoder* RobotMap::driverEnc = NULL;
Solenoid* RobotMap::driveShift = NULL;
Victor* RobotMap::loaderCam = NULL;
DigitalInput* RobotMap::loaderCamDetect = NULL;

void RobotMap::init() {
	
	LiveWindow* lw = LiveWindow::GetInstance();
	shooterSpinner = new CANJaguar(SHO_MTR_SPIN);
	
	armWrist = new CANJaguar(ARM_MTR_WRIST, CANJaguar::kPosition);
//	armWrist->ConfigSoftPositionLimits(WRIST_LOW, WRIST_HIGH);
	armWrist->SetPositionReference(CANJaguar::kPosRef_Potentiometer);
	armWrist->SetPID(WRIST_PID);
	
	
	armElbow = new CANJaguar(ARM_MTR_ELBOW, CANJaguar::kPosition);
	armElbow->SetPositionReference(CANJaguar::kPosRef_Potentiometer);
	armElbow->ConfigSoftPositionLimits(ELBOW_LOW, ELBOW_HIGH);
	armElbow->SetPID(ELBOW_PID);
	
	
	driveLeft = new Victor(DRV_MTR_LEFT);
	lw->AddActuator("Drive", "Left", (Victor*) driveLeft);
	
	
	driveRight = new Victor(DRV_MTR_RIGHT);
	lw->AddActuator("Drive", "Right", (Victor*) driveRight);
	
	
	drivelEnc = new Encoder(DRV_ENC_LEFT, false, Encoder::k4X);
	lw->AddSensor("Drive", "lEnc", drivelEnc);
	drivelEnc->SetDistancePerPulse(1.0);
        drivelEnc->SetPIDSourceParameter(Encoder::kRate);
        drivelEnc->Start();
        
        
	driverEnc = new Encoder(DRV_ENC_RIGHT, false, Encoder::k4X);
	lw->AddSensor("Drive", "rEnc", driverEnc);
	driverEnc->SetDistancePerPulse(1.0);
        driverEnc->SetPIDSourceParameter(Encoder::kRate);
        driverEnc->Start();
        
        
	driveShift = new Solenoid(DRV_SOL_SHIFT);
	lw->AddActuator("Drive", "Shift", driveShift);
	
	
	loaderCam = new Victor(LDR_MTR_CAM);
	lw->AddActuator("Loader", "Cam", loaderCam);
	
	
	loaderCamDetect = new DigitalInput(LDR_DIN_CAM);
	lw->AddSensor("Loader", "CamDetect", loaderCamDetect);
}
