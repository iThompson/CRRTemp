// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
#include "RobotMap.h"
#include "OIMap.h"
#include "LiveWindow/LiveWindow.h"

CANJaguar* RobotMap::shooterSpinner = NULL;
Servo* RobotMap::shooterCam = NULL;
DigitalInput* RobotMap::shooterCamDetect = NULL;
CANJaguar* RobotMap::armWrist = NULL;
CANJaguar* RobotMap::armElbow = NULL;
DigitalInput* RobotMap::armDetect = NULL;
SpeedController* RobotMap::driveLeft = NULL;
SpeedController* RobotMap::driveRight = NULL;
Encoder* RobotMap::drivelEnc = NULL;
Encoder* RobotMap::driverEnc = NULL;
Solenoid* RobotMap::driveShift = NULL;

void RobotMap::init() {
	
	LiveWindow* lw = LiveWindow::GetInstance();
	shooterSpinner = new CANJaguar(SHO_MTR_SPIN);
	
	
	shooterCam = new Servo(SHO_MTR_CAM);
	lw->AddActuator("Shooter", "Cam", shooterCam);
	
	shooterCamDetect = new DigitalInput(SHO_DIN_CAM);
	lw->AddSensor("Shooter", "CamDetect", shooterCamDetect);
	
	armWrist = new CANJaguar(ARM_MTR_WRIST);
	
	
	armElbow = new CANJaguar(ARM_MTR_ELBOW);
	 
	
	armDetect = new DigitalInput(ARM_DIN_LIMIT);
	
	
	driveLeft = new Victor(DRV_MTR_LEFT);
	lw->AddActuator("Drive", "Left", (Victor*) driveLeft);
	
	driveRight = new Victor(DRV_MTR_RIGHT);
	lw->AddActuator("Drive", "Right", (Victor*) driveRight);
	
	drivelEnc = new Encoder(1, 2, 1, 3, false, Encoder::k4X);
	lw->AddSensor("Drive", "lEnc", drivelEnc);
	drivelEnc->SetDistancePerPulse(1.0);
        drivelEnc->SetPIDSourceParameter(Encoder::kRate);
        drivelEnc->Start();
	driverEnc = new Encoder(1, 4, 1, 5, false, Encoder::k4X);
	lw->AddSensor("Drive", "rEnc", driverEnc);
	driverEnc->SetDistancePerPulse(1.0);
        driverEnc->SetPIDSourceParameter(Encoder::kRate);
        driverEnc->Start();
	driveShift = new Solenoid(DRV_SOL_SHIFT);
	lw->AddActuator("Drive", "Shift", driveShift);
	
	
}
