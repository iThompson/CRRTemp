// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "OI.h"
#include "RobotMap.h"
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/Arm/ArmPosition.h"
#include "Commands/Arm/ArmUserPosition.h"
#include "Commands/Drive/JoystickDrive.h"
#include "Commands/Drive/JoystickAutoDrive.h"
#include "Commands/Drive/ShiftHigh.h"
#include "Commands/Drive/ShiftLow.h"
#include "Commands/Shooter/ShooterShoot.h"
#include "Commands/Shooter/ShooterSpin.h"
#include "Commands/Shooter/ShooterStop.h"
#include "Commands/Shooter/ShootOnce.h"

OI::OI() {
	// Process operator interface input here.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	m_lStick = new Joystick(DRV_JOY_LEFT);
	m_rStick = new Joystick(DRV_JOY_RIGHT);
     
    // SmartDashboard Buttons
	SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

	//TODO: Still dummy values; replace later
	m_driveHighBtn = new JoystickButton(m_rStick, 1);
	m_driveLowBtn = new JoystickButton(m_lStick, 1);
	
	m_shootBtn = new DigitalIOButton(SHO_DIN_OFF);
	m_shooterManualBtn = new DigitalIOButton(SHO_DIN_MANUAL);
	m_shooterDefaultBtn = new DigitalIOButton(SHO_DIN_DEFAULT);

	m_armStowBtn = new DigitalIOButton(ARM_DIN_STOW);
	m_armFeederBtn = new DigitalIOButton(ARM_DIN_FEED);
	m_armMiddleBtn = new DigitalIOButton(ARM_DIN_MID);
	m_armPyramidBtn = new DigitalIOButton(ARM_DIN_PYR);
	m_armTopBtn = new DigitalIOButton(ARM_DIN_TOP);
	
	//Separation comment to make it easier to read
	
	m_driveHighBtn->WhenPressed(new ShiftHigh());
	m_driveLowBtn->WhenPressed(new ShiftLow());
	
	m_shootBtn->WhileHeld(new ShooterShoot());
	m_shootBtn->WhenReleased(new ShootOnce());
	m_shooterManualBtn->WhileHeld(new ShooterSpin(true));
	m_shooterDefaultBtn->WhileHeld(new ShooterSpin(false));
	
	//TODO: PLACEHOLDER CONSTANTS! REPLACE WITH PROPER VALUES LATER!!!!!!!!
	m_armStowBtn->WhenPressed(new ArmPosition(ARM_POS_STOW_EL, ARM_POS_STOW_WR));
	m_armFeederBtn->WhenPressed(new ArmPosition(ARM_POS_FEED_EL, ARM_POS_FEED_WR));
	m_armMiddleBtn->WhenPressed(new ArmPosition(ARM_POS_MID_EL, ARM_POS_MID_WR));
	m_armPyramidBtn->WhenPressed(new ArmPosition(ARM_POS_PYR_EL, ARM_POS_PYR_WR));
	m_armTopBtn->WhenPressed(new ArmPosition(ARM_POS_TOP_EL, ARM_POS_TOP_WR));
}

double OI::GetYLeft() {
	return m_lStick->GetY();
}

double OI::GetYRight() {
	return m_rStick->GetY();
}

double OI::GetWristSetpoint()
{
	// Pending SmartDashboard input
	return 42.0;
}



double OI::GetElbowSetpoint()
{
	// Pending SmartDashboard input
	return 900.1;
}



double OI::GetShooterSpeed()
{
	return DriverStation::GetInstance()->GetEnhancedIO().GetAnalogIn(1);
}


