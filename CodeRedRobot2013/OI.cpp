// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
#include "OI.h"
#include "RobotMap.h"
#include "InvertedIOButton.h"
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/TwoDiscAuton.h"
#include "Commands/Arm/ArmPosition.h"
#include "Commands/Arm/ArmUserPosition.h"
#include "Commands/Drive/JoystickDrive.h"
#include "Commands/Drive/JoystickAutoDrive.h"
#include "Commands/Drive/ShiftHigh.h"
#include "Commands/Drive/ShiftLow.h"
#include "Commands/Loader/Fire.h"
#include "Commands/Loader/SendCamHome.h"
#include "Commands/Loader/ReverseCamHome.h"
#include "Commands/Shooter/ShooterSpin.h"
#include "Commands/Shooter/ShooterStop.h"

static const char *kWristSetpoint = "Wrist Setpoint";
static const char *kElbowSetpoint = "Elbow Setpoint";
OI::OI() {
	// Process operator interface input here.
	m_lStick = new Joystick(1);
	
	m_rStick = new Joystick(2);
	
     
        // SmartDashboard Buttons
	SmartDashboard::PutData("Autonomous Command", new TwoDiscAuton());
	
	SmartDashboard::PutData("Manual Arm", new ArmUserPosition());
	
	SmartDashboard::PutData("Shooter", Robot::shooter);
	SmartDashboard::PutData("Loader", Robot::loader);
	
	m_driveHighBtn = new JoystickButton(m_rStick, 1);
	m_driveLowBtn = new JoystickButton(m_lStick, 1);
	
	m_shootBtn = new InvertedIOButton(LDR_DIN_FIRE);
	m_shooterManualBtn = new DigitalIOButton(SHO_DIN_MANUAL);
	m_shooterDefaultBtn = new DigitalIOButton(SHO_DIN_DEFAULT);
	m_armStowBtn = new InvertedIOButton(ARM_DIN_STOW);
	m_armFeederBtn = new InvertedIOButton(ARM_DIN_FEED);
	m_armMiddleBtn = new InvertedIOButton(ARM_DIN_MID);
	m_armPyramidBtn = new InvertedIOButton(ARM_DIN_PYR);
	m_armTopBtn = new InvertedIOButton(ARM_DIN_TOP);
	
	m_camReverseBtn = new DigitalIOButton(10); // Aux down
	
	//Separation comment to make it easier to read
	
	m_driveHighBtn->WhenPressed(new ShiftHigh());
	m_driveLowBtn->WhenPressed(new ShiftLow());
	
	m_shootBtn->WhileHeld(new Fire());
	m_shooterManualBtn->WhileHeld(new ShooterSpin(true));
	m_shooterDefaultBtn->WhileHeld(new ShooterSpin(false));
	
	m_armStowBtn->WhenPressed(new ArmPosition(Arm::kStow));
	m_armFeederBtn->WhenPressed(new ArmPosition(Arm::kFeeder));
	m_armMiddleBtn->WhenPressed(new ArmPosition(Arm::kMid));
	m_armPyramidBtn->WhenPressed(new ArmPosition(Arm::kPyramid));
	m_armTopBtn->WhenPressed(new ArmPosition(Arm::kHigh));
	
	m_camReverseBtn->WhileHeld(new ReverseCamHome());
	
	// Init SmartDashboard values
	SmartDashboard::init();
	SmartDashboard::PutNumber(kWristSetpoint, Robot::arm->GetWristPosition(Arm::kStow));
	SmartDashboard::PutNumber(kElbowSetpoint, Robot::arm->GetElbowPosition(Arm::kStow));
}
double OI::GetYLeft() {
	return m_lStick->GetY();
}
double OI::GetYRight() {
	return m_rStick->GetY();
}
double OI::GetWristSetpoint()
{
	return SmartDashboard::GetNumber(kWristSetpoint);
}
double OI::GetElbowSetpoint()
{
	return SmartDashboard::GetNumber(kElbowSetpoint);
}

void OI::SetWristSetpoint(double setpoint)
{
	SmartDashboard::PutNumber(kWristSetpoint, setpoint);
}

void OI::SetElbowSetpoint(double setpoint)
{
	SmartDashboard::PutNumber(kElbowSetpoint, setpoint);
}

double OI::GetShooterSpeed()
{
	return -1 + DriverStation::GetInstance()->GetEnhancedIO().GetAnalogInRatio(1);
}
