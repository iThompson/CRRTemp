// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Drive.h"
#include "../RobotMap.h"
#include "../Commands/JoystickTote.h"
#include "math.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

Drive::Drive() : Subsystem("Drive") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	leftDrive = RobotMap::driveLeftDrive;
	rightDrive = RobotMap::driveRightDrive;
	centerDrive = RobotMap::driveCenterDrive;
	lowerWheel = RobotMap::drivelowerWheel;
	toteStacker = RobotMap::drivetoteStacker;
	containerStacker = RobotMap::drivecontainerStacker;
	toteHall = RobotMap::toteHall;
	containerHall = RobotMap::containerHall;
//	imu = RobotMap::m_imu;
	FullSpeed = true;
	NOS = false;
	braked = true;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void Drive::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new JoystickTote());
}

void Drive::HDrive(double forwardSpeed, double sideSpeed, double turnSpeed) {
	double leftSpeed = forwardSpeed - turnSpeed;
	double rightSpeed = forwardSpeed + turnSpeed;
	if(leftSpeed > 1) leftSpeed = 1;
	if(leftSpeed < -1) leftSpeed = -1;
	if(rightSpeed > 1) rightSpeed = 1;
	if(rightSpeed < -1) rightSpeed = -1;
	if(FullSpeed && !NOS) {
		leftSpeed *= fabs(leftSpeed);
		rightSpeed *= fabs(rightSpeed);
		sideSpeed *= fabs(sideSpeed);
		leftSpeed *= .75;
		rightSpeed *= .75;
	}
	else if(!FullSpeed){
		sideSpeed *= .9;
		leftSpeed *= .5;
		rightSpeed *= .5;
	}
	else
	{
		leftSpeed *= fabs(leftSpeed);
		rightSpeed *= fabs(rightSpeed);
		sideSpeed *= fabs(sideSpeed);
	}

	leftDrive->Set(-leftSpeed);
	rightDrive->Set(rightSpeed);
	centerDrive->Set(-sideSpeed);
}

void Drive::ToggleHalfSpeed(){
	FullSpeed = !FullSpeed;
}

void Drive::ToggleNOS(){
	NOS = !NOS;
}

void Drive::SetCenterWheel(bool down) {
	lowerWheel->Set(down);
}

void Drive::ResetIMU() {
//	RobotMap::m_imu->ZeroYaw();
}

double Drive::GetRobotHeading() {
//	return RobotMap::m_imu->GetYaw();
	return 0;
}



void Drive::SetClawPos(int pos) {
	containerStacker->SetControlMode(CANTalon::ControlMode::kPosition);
	containerStacker->Set(pos);
}

void Drive::SetClawSpeed(double speed) {
	//containerStacker->SetControlMode(CANTalon::ControlMode::kSpeed);
	containerStacker->Set(speed);
}

void Drive::SetTotePos(int pos) {
	toteStacker->SetControlMode(CANTalon::ControlMode::kPosition);
	toteStacker->Set(pos);
}

void Drive::SetToteSpeed(double speed) {
//	toteStacker->SetControlMode(CANTalon::ControlMode::kSpeed);
	toteStacker->Set(speed);
}

int Drive::GetContainerEnc() {
	return containerStacker->GetEncPosition();
}

int Drive::GetToteEnc() {
	return toteStacker->GetEncPosition();
}

void Drive::ZeroCont() {
	toteStacker->SetPosition(0);
}

void Drive::SetContPID(double p, double i, double d){
	containerStacker->SetPID(p,i,d);
}

int Drive::GetContError() {
	return containerStacker->GetClosedLoopError();
}

int Drive::GetToteError() {
	return toteStacker->GetClosedLoopError();
}

double Drive::GetSpeed() {
	return containerStacker->GetSpeed();
}

void Drive::ToggleBrakePiston() {
	lowerWheel->Set(braked);
	braked = !braked;
}

bool Drive::GetToteHall() {
	return toteHall->Get();
}

bool Drive::GetContainerHall() {
	return containerHall->Get();
}

// Put methods for controlling this subsystem
// here. Call these from Commands.

