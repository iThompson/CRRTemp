// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "SerialSensor.h"
#include "../RobotMap.h"
#include "../Commands/PrintBytes.h"
#include "math.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

SerialSensor::SerialSensor() : Subsystem("SerialSensor") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	sPort = new SerialPort(115200, SerialPort::Port::kUSB);
	//sPort->SetTimeout(0);
	//packet = pdata.packet;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void SerialSensor::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new PrintBytes());
}

void SerialSensor::Update()
{
	packet_t tmp_packet;
	int m = sPort->GetBytesReceived();
	bool invalid = false;
	for(int i = 0; i < m; i++){
		sPort->Read((char *)(&tmp_packet),1);
		if(ValidatePacket(&tmp_packet)) m_packet = tmp_packet;
		else invalid = true;
	}
	if(invalid) sPort->Write("\xff", 1);
}

packet_t* SerialSensor::GetState()
{
	return &m_packet;
}

bool SerialSensor::ValidatePacket(packet_t* packet)
{
	return (packet->tote1 ^
			packet->tote2 ^
			packet->tote3 ^
			packet->tote4 ^
			packet->tote5) == packet->checksum;


}

// Put methods for controlling this subsystem
// here. Call these from Commands.

